html_nodes(".hot-shot-timer span") %>%
html_text()
xkom2 = read_html("http://www.x-kom.pl/goracy_strzal/7781") %>%
html_nodes(".s , .m , .h") %>%
html_text()
xkom2 = read_html("http://www.x-kom.pl/goracy_strzal/7781") %>%
html_node(".s , .m , .h") %>%
html_text()
?xml
xkom3 = xml("http://www.x-kom.pl/")
xkom3 = xml("http://www.x-kom.pl/") %>%
xml_nodes(".hot-shot-timer span") %>%
xml_text()
xkom3 = xml("http://www.x-kom.pl/") %>%
xml_nodes(".hot-shot-timer span")
xkom3 = xmlTreeParse("http://www.x-kom.pl/")
xkom3 = read_xml("http://www.x-kom.pl/")
xkom3 = read_xml("http://www.x-kom.pl/xml/")
xkom2 = read_html("http://www.x-kom.pl/goracy_strzal/7781") %>%
html_node(".s , .m , .h") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes(".hot-shot-timer") %>%
html_text()
?xml_find_one()
xkom4 = read_html("http://www.x-kom.pl/")
xkom4 = read_xml(xkom4)
xkom4 = read_xml("xkom4")
xkom4 = read_html("http://www.x-kom.pl/")
xkom4 = read_xml("xkom4")
xkom44 = read_html("http://www.x-kom.pl/")
xkom4 = read_xml("xkom44")
xkom44 = read_html("http://www.x-kom.pl/")
xkom4 = read_html("http://www.x-kom.pl/")
xkom4 = htmlParse("http://www.x-kom.pl/")
?htmlParse
xkom4 = xmlParse("http://www.x-kom.pl/")
xkom4 = html("http://www.x-kom.pl/")
xkom4 = read_html("http://www.x-kom.pl/")
xkom = read_html("http://www.x-kom.pl/")
xkom
xkom = read_html("http://www.x-kom.pl/assets/css/xkom_rwd.min.css?v=b5f0ca08b8dcd28b070e6bebf227e750") %>%
html_nodes(".hot-shot-timer") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/assets/css/xkom_rwd.min.css?v=b5f0ca08b8dcd28b070e6bebf227e750") %>%
html_nodes(".hot-shot-timer span") %>%
html_text()
xkom = read_html("http://www.x-kom.pl") %>%
html_nodes(".m span") %>%
html_text()
xkom
library(rvest)
library(XML)
url <- "http://www.x-kom.pl/"
read <- read_xml(url)
library(rvest)
library(XML)
url <- "http://www.x-kom.pl/"
read <- read_html(url)
install.packages("RCurl")
library(RCurl)
url <- "http://www.x-kom.pl/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
pagetree <- htmlTreeParse(webpage, error=function(...){})
body <- pagetree$children$html$children$body
divbodyContent <- body$children$div$children[[1]]$children$div$children[[4]]
body
which(body == "<span class="m">4</span>")
which(body == <span class="m">4</span>)
tekst = as.character(body)
tekst
?which
which(tekst == "<span class="m">4</span>")
txt = htmlToText(input)
library(rvest)
library(XML)
library(RCurl)
url <- "http://www.x-kom.pl/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
pagetree <- htmlTreeParse(webpage, error=function(...){})
body <- pagetree$children$html$children$body
divbodyContent <- body$children$div$children[[1]]$children$div$children[[4]]
htmlToText <- function(input, ...) {
###---PACKAGES ---###
require(RCurl)
require(XML)
###--- LOCAL FUNCTIONS ---###
# Determine how to grab html for a single input element
evaluate_input <- function(input) {
# if input is a .html file
if(file.exists(input)) {
char.vec <- readLines(input, warn = FALSE)
return(paste(char.vec, collapse = ""))
}
# if input is html text
if(grepl("</html>", input, fixed = TRUE)) return(input)
# if input is a URL, probably should use a regex here instead?
if(!grepl(" ", input)) {
# downolad SSL certificate in case of https problem
if(!file.exists("cacert.perm")) download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.perm")
return(getURL(input, followlocation = TRUE, cainfo = "cacert.perm"))
}
# return NULL if none of the conditions above apply
return(NULL)
}
# convert HTML to plain text
convert_html_to_text <- function(html) {
doc <- htmlParse(html, asText = TRUE)
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
return(text)
}
# format text vector into one character string
collapse_text <- function(txt) {
return(paste(txt, collapse = " "))
}
###--- MAIN ---###
# STEP 1: Evaluate input
html.list <- lapply(input, evaluate_input)
# STEP 2: Extract text from HTML
text.list <- lapply(html.list, convert_html_to_text)
# STEP 3: Return text
text.vector <- sapply(text.list, collapse_text)
return(text.vector)
}
input = "http://www.x-kom.pl/"
txt = htmlToText(input)
txt
library(rvest)
library(XML)
library(RCurl)
url <- "http://www.x-kom.pl/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
webpage
webpage[650:750]
which(webpage == "endDate)
dfds
sd
fd
library(RCurl)
library(rvest)
library(XML)
library(RCurl)
url <- "http://www.x-kom.pl/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
which(webpage =="endDate")
zegar = html("http://www.x-kom.pl/") %>%
html_nodes("endDate") %>%
html_text()
zegar = read_html("http://www.x-kom.pl/") %>%
html_nodes("endDate") %>%
html_text()
zegar = read_html("http://www.x-kom.pl/") %>%
html_text()
which(zegar == "endDate")
zegar
zegar = read_html("view-source:http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
zegar = read_html("http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
zegar
which(zegar == "page")
library(rvest)
library(XML)
library(RCurl)
url <- "view-source:http://www.x-kom.pl/goracy_strzal/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
zegar = read_html("http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
library(stringr)
data = zegar[which(str_detect(zegar, "endDate")), ]
data
?str_detect
new.zegar = as.character(zegar)
data = zegar[which(str_detect(zegar, "endDate")), ]
data
new.zegar = as.character(zegar)
data = new.zegar[which(str_detect(new.zegar, "endDate")), ]
data
class(zegar)
class(new.zegar)
?stringr
zegar
zegar = read_html("http://www.x-kom.pl/goracy_strzal/")
zegar
zegar = read_html("http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
zegar
str_detect(zegar,"category")
str_detect(zegar,"endDate")
which(str_detect(zegar,"endDate"))
?grep
grep("endDate",zegar)
length(grep("endDate",zegar))
install.packages("tm")
url <- "view-source:http://www.x-kom.pl/goracy_strzal/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
library(rvest)
library(XML)
library(RCurl)
library(tm)
library(stringr)
# url <- "view-source:http://www.x-kom.pl/goracy_strzal/"
# webpage <- getURL(url)
# webpage <- readLines(tc <- textConnection(webpage)); close(tc)
zegar = read_html("http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
zegar <- tm_map(zegar, stripWhitespace)
?tm_map
zegar = Corpus(zegar)
korpus = Corpus(zegar, zegar)
?data
dupa = data("zegar")
dupa
dupa = Corpus(zegar)
writeCorpus(zegar,"C:/zegar.txt")
write(zegar,"C:/zegar.txt")
obliczenia = readChar("C:/zegar.txt")
?readChar
obliczenia = reader("C:/zegar.txt")
?reader
obliczenia = readDOC("C:/zegar.txt")
obliczenia
?readDOC
obliczenia = read.table("C:/zegar.txt")
?read.table
read.table("C:/zegar.txt")
read.table("C:/zegar.txt", sep="\t")
?find
install.packages("gWidgetsRGtk2")
install.packages("pmg")
#najprostszy model Regresji || WPROWADZENIE ||
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
data(cars)
attach(cars)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ speed, data = cars)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(speed, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
#najprostszy model Regresji || WPROWADZENIE ||
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
data(cars)
attach(cars)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ 1+speed, data = cars)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(speed, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
#najprostszy model Regresji || WPROWADZENIE ||
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
data(cars)
attach(cars)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ speed, data = cars)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(speed, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
coef(model.regresji)
coef(model.regresji)[1]
model.liniowy$coefficients[1]
summary(model.regresji)$sigma
fitted(model.regresji)
model.regresji$fitted.values
model.regresji$fit
coef(model.regresji)[1]
coef(model.regresji)[2]
residuals(model.regresji)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
model.opis
setwd("C:/Users/Piotrek/Desktop/R_projects/HEALS regresja")
library(MASS)
attach(heal)
attach(heals)
attach(hills)
hills
plot(hills)
plot(hills$dist, hills$time)
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ time, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(speed, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ time, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(time, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
hills
model.opis
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
data(cars)
attach(cars)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ speed, data = cars)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(speed, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
model.opis
plot(speed, dist, main="Wykres zależności dystansu od czasu")
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ time, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(time, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ time, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(time, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
plot(speed, dist, main="Wykres zależności dystansu od czasu")
plot(hills$speed, hills$dist, main="Wykres zależności dystansu od czasu")
plot(hills$time, hills$dist, main="Wykres zależności dystansu od czasu")
plot(time, dist, main="Wykres zależności dystansu od czasu")
plot(dist, czas, main="Wykres zależności czasu od dystansu")
plot(dist, time, main="Wykres zależności czasu od dystansu")
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(time ~ dist, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(dist, time, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
model.opis
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ time, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(time, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
model.opis
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ time, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(time, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
#library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ time, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(time, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
###############################################
#           Model Regresji Liniowej           #
###############################################
#zaczytanie danych (tutaj skorzystam z wbudowanego zestawy "cars")
#library(MASS)
attach(hills)
#konstruujemy prosty model regresji liniowej
model.regresji = lm(dist ~ time, data = hills)
#dokladniejsze wypisanie uzyskanych wynikow
model.opis = summary(model.regresji)
#Wyraz wolny Bo
coef(model.regresji)[1]
#Współczynnik kierunkowy B1
coef(model.regresji)[2]
#Wartości prognozowane: Yi
fitted(model.regresji)
#typowy wykres regresji || jedna zmienna objasniająca
plot(time, dist, main="Wykres regresji liniowej")
abline(model.regresji)
grid()
coef(model.regresji)[1]
coef(model.regresji)[2]
?hills
plot(time, dist, title="Wykres zależności pokonanej drogi od czasu")
plot(time, dist, main = "Wykres zależności pokonanej drogi od czasu")
coef(model.regresji)[1]
coef(model.regresji)[2]
