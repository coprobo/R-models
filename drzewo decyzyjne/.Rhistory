pic = lego_movie %>% html_nodes("#titleCast .loadlate") %>%
html_attrs()
pic
fotki = read_html("http://www.hegre-art.com/models/erica") %>%
html_nodes("img") %>%
html_attrs()
fotki
fotki = read_html("http://www.hegre-art.com/models/erica") %>%
html_nodes("#galleries-listing img") %>%
html_attrs()
fotki
library(rvest)
xkom = html("http://www.x-kom.pl/") %>%
html_nodes(".col-sm-6+ .col-sm-6 , .hurry-info") %>%
html_text()
library(rvest)
xkom = html("http://www.x-kom.pl/") %>%
html_nodes(".col-sm-6+ .col-sm-6 , .hurry-info") %>%
html_text()
xkom
library(rvest)
xkom = html("http://www.x-kom.pl/") %>%
html_nodes(".hot-shot-timer") %>%
html_text()
xkom
library(rvest)
xkom = html("http://www.x-kom.pl/") %>%
html_nodes(".hot-shot-timer")
xkom
class(xkom)
library(rvest)
xkom = html("http://www.x-kom.pl/") %>%
html_nodes(".hot-shot-timer span") %>%
html_text() %>%
as.numeric()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes(".hot-shot-timer span") %>%
html_text() %>%
as.numeric()
xkom
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("div.hot-shot-timer span") %>%
html_text() %>%
as.numeric()
xkom
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("div.hot-shot-timer span") %>%
html_text()
xkom
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("<span class="s">9</span>") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes(doc, xpath = "<span class="s">9</span>")
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("<span class="s">9</span>") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes(<span class="s">9</span>) %>%
html_text()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("div.hot-shot-timer 323px x 60px")
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("div.hot-shot-timer 323px x 60px") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("div.hot-shot-timer 323px x 60px") %>%
html_table()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("span.h") %>%
html_text()
xkom
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("span.h") %>%
html_structure()
?html
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("p.hurry -info") %>%
html_text()
xkom
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("hurry-info") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("hurry-info span") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes("hotShot") %>%
html_text()
xkom
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes(".hot-shot-timer") %>%
html_text()
xkom
xkom2 = read_html("http://www.x-kom.pl/") %>%
html_nodes(".h+ .h") %>%
html_text()
xkom2 = read_html("http://www.x-kom.pl/") %>%
html_nodes(".hot-shot-timer span") %>%
html_text()
xkom2 = read_html("http://www.x-kom.pl/goracy_strzal/7781") %>%
html_nodes(".hot-shot-timer span") %>%
html_text()
xkom2 = read_html("http://www.x-kom.pl/goracy_strzal/7781") %>%
html_nodes(".s , .m , .h") %>%
html_text()
xkom2 = read_html("http://www.x-kom.pl/goracy_strzal/7781") %>%
html_node(".s , .m , .h") %>%
html_text()
?xml
xkom3 = xml("http://www.x-kom.pl/")
xkom3 = xml("http://www.x-kom.pl/") %>%
xml_nodes(".hot-shot-timer span") %>%
xml_text()
xkom3 = xml("http://www.x-kom.pl/") %>%
xml_nodes(".hot-shot-timer span")
xkom3 = xmlTreeParse("http://www.x-kom.pl/")
xkom3 = read_xml("http://www.x-kom.pl/")
xkom3 = read_xml("http://www.x-kom.pl/xml/")
xkom2 = read_html("http://www.x-kom.pl/goracy_strzal/7781") %>%
html_node(".s , .m , .h") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/") %>%
html_nodes(".hot-shot-timer") %>%
html_text()
?xml_find_one()
xkom4 = read_html("http://www.x-kom.pl/")
xkom4 = read_xml(xkom4)
xkom4 = read_xml("xkom4")
xkom4 = read_html("http://www.x-kom.pl/")
xkom4 = read_xml("xkom4")
xkom44 = read_html("http://www.x-kom.pl/")
xkom4 = read_xml("xkom44")
xkom44 = read_html("http://www.x-kom.pl/")
xkom4 = read_html("http://www.x-kom.pl/")
xkom4 = htmlParse("http://www.x-kom.pl/")
?htmlParse
xkom4 = xmlParse("http://www.x-kom.pl/")
xkom4 = html("http://www.x-kom.pl/")
xkom4 = read_html("http://www.x-kom.pl/")
xkom = read_html("http://www.x-kom.pl/")
xkom
xkom = read_html("http://www.x-kom.pl/assets/css/xkom_rwd.min.css?v=b5f0ca08b8dcd28b070e6bebf227e750") %>%
html_nodes(".hot-shot-timer") %>%
html_text()
xkom = read_html("http://www.x-kom.pl/assets/css/xkom_rwd.min.css?v=b5f0ca08b8dcd28b070e6bebf227e750") %>%
html_nodes(".hot-shot-timer span") %>%
html_text()
xkom = read_html("http://www.x-kom.pl") %>%
html_nodes(".m span") %>%
html_text()
xkom
library(rvest)
library(XML)
url <- "http://www.x-kom.pl/"
read <- read_xml(url)
library(rvest)
library(XML)
url <- "http://www.x-kom.pl/"
read <- read_html(url)
install.packages("RCurl")
library(RCurl)
url <- "http://www.x-kom.pl/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
pagetree <- htmlTreeParse(webpage, error=function(...){})
body <- pagetree$children$html$children$body
divbodyContent <- body$children$div$children[[1]]$children$div$children[[4]]
body
which(body == "<span class="m">4</span>")
which(body == <span class="m">4</span>)
tekst = as.character(body)
tekst
?which
which(tekst == "<span class="m">4</span>")
txt = htmlToText(input)
library(rvest)
library(XML)
library(RCurl)
url <- "http://www.x-kom.pl/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
pagetree <- htmlTreeParse(webpage, error=function(...){})
body <- pagetree$children$html$children$body
divbodyContent <- body$children$div$children[[1]]$children$div$children[[4]]
htmlToText <- function(input, ...) {
###---PACKAGES ---###
require(RCurl)
require(XML)
###--- LOCAL FUNCTIONS ---###
# Determine how to grab html for a single input element
evaluate_input <- function(input) {
# if input is a .html file
if(file.exists(input)) {
char.vec <- readLines(input, warn = FALSE)
return(paste(char.vec, collapse = ""))
}
# if input is html text
if(grepl("</html>", input, fixed = TRUE)) return(input)
# if input is a URL, probably should use a regex here instead?
if(!grepl(" ", input)) {
# downolad SSL certificate in case of https problem
if(!file.exists("cacert.perm")) download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.perm")
return(getURL(input, followlocation = TRUE, cainfo = "cacert.perm"))
}
# return NULL if none of the conditions above apply
return(NULL)
}
# convert HTML to plain text
convert_html_to_text <- function(html) {
doc <- htmlParse(html, asText = TRUE)
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
return(text)
}
# format text vector into one character string
collapse_text <- function(txt) {
return(paste(txt, collapse = " "))
}
###--- MAIN ---###
# STEP 1: Evaluate input
html.list <- lapply(input, evaluate_input)
# STEP 2: Extract text from HTML
text.list <- lapply(html.list, convert_html_to_text)
# STEP 3: Return text
text.vector <- sapply(text.list, collapse_text)
return(text.vector)
}
input = "http://www.x-kom.pl/"
txt = htmlToText(input)
txt
library(rvest)
library(XML)
library(RCurl)
url <- "http://www.x-kom.pl/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
webpage
webpage[650:750]
which(webpage == "endDate)
dfds
sd
fd
library(RCurl)
library(rvest)
library(XML)
library(RCurl)
url <- "http://www.x-kom.pl/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
which(webpage =="endDate")
zegar = html("http://www.x-kom.pl/") %>%
html_nodes("endDate") %>%
html_text()
zegar = read_html("http://www.x-kom.pl/") %>%
html_nodes("endDate") %>%
html_text()
zegar = read_html("http://www.x-kom.pl/") %>%
html_text()
which(zegar == "endDate")
zegar
zegar = read_html("view-source:http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
zegar = read_html("http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
zegar
which(zegar == "page")
library(rvest)
library(XML)
library(RCurl)
url <- "view-source:http://www.x-kom.pl/goracy_strzal/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
zegar = read_html("http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
library(stringr)
data = zegar[which(str_detect(zegar, "endDate")), ]
data
?str_detect
new.zegar = as.character(zegar)
data = zegar[which(str_detect(zegar, "endDate")), ]
data
new.zegar = as.character(zegar)
data = new.zegar[which(str_detect(new.zegar, "endDate")), ]
data
class(zegar)
class(new.zegar)
?stringr
zegar
zegar = read_html("http://www.x-kom.pl/goracy_strzal/")
zegar
zegar = read_html("http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
zegar
str_detect(zegar,"category")
str_detect(zegar,"endDate")
which(str_detect(zegar,"endDate"))
?grep
grep("endDate",zegar)
length(grep("endDate",zegar))
install.packages("tm")
url <- "view-source:http://www.x-kom.pl/goracy_strzal/"
webpage <- getURL(url)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
library(rvest)
library(XML)
library(RCurl)
library(tm)
library(stringr)
# url <- "view-source:http://www.x-kom.pl/goracy_strzal/"
# webpage <- getURL(url)
# webpage <- readLines(tc <- textConnection(webpage)); close(tc)
zegar = read_html("http://www.x-kom.pl/goracy_strzal/") %>%
html_text()
zegar <- tm_map(zegar, stripWhitespace)
?tm_map
zegar = Corpus(zegar)
korpus = Corpus(zegar, zegar)
?data
dupa = data("zegar")
dupa
dupa = Corpus(zegar)
writeCorpus(zegar,"C:/zegar.txt")
write(zegar,"C:/zegar.txt")
obliczenia = readChar("C:/zegar.txt")
?readChar
obliczenia = reader("C:/zegar.txt")
?reader
obliczenia = readDOC("C:/zegar.txt")
obliczenia
?readDOC
obliczenia = read.table("C:/zegar.txt")
?read.table
read.table("C:/zegar.txt")
read.table("C:/zegar.txt", sep="\t")
?find
install.packages("gWidgetsRGtk2")
install.packages("pmg")
setwd("C:/Users/Piotrek/Desktop/R_projects/hils regresja")
setwd("C:/Users/Piotrek/Desktop/R_projects/drzewo decyzyjne")
###############################################
#           Model Drzewa Decyzyjnego          #
###############################################
library("praty")
library("party")
?party
install.packages("party")
library("party")
?party
install.packages("multcomp")
###############################################
#           Model Drzewa Decyzyjnego          #
###############################################
library("party")
?party
?iris
irysy = as.data.frame(iris)
View(irysy)
irysy2 = as.data.frame(iris3)
View(irysy2)
str(iris)
irysy.drzewo = ctree(Species ~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width, data = iris)
###############################################
#           Model Drzewa Decyzyjnego          #
###############################################
library("party")
#skorzystam z dobrze znanego data setu do nauki
#a mianowicie z danych odnośnie irysów
#jest to data frame ze 150 przypadkami i 5zmiennymi
#podstawowe informacje o danych
str(iris)
#Sepal length and width = długość i szerokość kielicha
#Petal length and width = długość i szerokość płatków
#Species = gatunek
#zaczytanie danych
irysy = as.data.frame(iris)
#drzewo
irysy.drzewo = ctree(Species ~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width, data = iris)
print(irysy.drzewo)
plot(irysy.drzewo)
View(irysy)
?plot
plot(irysy.drzewo, main = "Drzewo decyzyjne irysy")
irysy.Kielich.Dlugosc = as.data.frame(irysy.Sepal.Length)
irysy$Kielich.Dlugosc = as.data.frame(irysy.Sepal.Length)
irysy$Kielich.Dlugosc = as.data.frame(irysy$Sepal.Length)
irysy$Kielich.Dlugosc = data.frame(Sepal.Length)
irysy$Kielich.Dlugosc = data.frame(irysy$Sepal.Length)
irysy$Kielich.Dlugosc
View(irysy)
library(plyr)
rename(irysy, c("Sepal.Length"="Kielich.Długość", "Sepal.Width"="Kielich.Szerokość",
"Petal.Length"="Płatek.Długość", "Petal.Width"="Płatek.Szerokość"))
###############################################
#           Model Drzewa Decyzyjnego          #
###############################################
library("party")
#skorzystam z dobrze znanego data setu do nauki
#a mianowicie z danych odnośnie irysów
#jest to data frame ze 150 przypadkami i 5zmiennymi
#zaczytanie danych
irysy = as.data.frame(iris)
#podstawowe informacje o danych
str(iris)
#Sepal length and width = długość i szerokość kielicha
#Petal length and width = długość i szerokość płatków
#Species = gatunek
library(plyr)
rename(irysy, c("Sepal.Length"="Kielich.Długość", "Sepal.Width"="Kielich.Szerokość",
"Petal.Length"="Płatek.Długość", "Petal.Width"="Płatek.Szerokość",
"Species"="Gatunek"))
#drzewo
irysy.drzewo = ctree(Species ~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width, data = iris)
print(irysy.drzewo)
plot(irysy.drzewo)
View(irysy)
irysy = rename(irysy, c("Sepal.Length"="Kielich.Długość", "Sepal.Width"="Kielich.Szerokość",
"Petal.Length"="Płatek.Długość", "Petal.Width"="Płatek.Szerokość",
"Species"="Gatunek"))
View(irysy)
irysy.drzewo = ctree(Species ~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width, data = iris)
print(irysy.drzewo)
plot(irysy.drzewo)
irysy.drzewo = ctree(Species ~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width, data = iris)
print(irysy.drzewo)
plot(irysy.drzewo)
irysy.drzewo = ctree(Gatunek ~ Kielich.Długość + Kielich.Szerokość +
Płatek.Długość + Płatek.Szerokość, data = iris)
print(irysy.drzewo)
plot(irysy.drzewo)
View(irysy)
irysy.drzewo = ctree(Gatunek ~ Kielich.Długość + Kielich.Szerokość +
Płatek.Długość + Płatek.Szerokość, data = irysy)
print(irysy.drzewo)
plot(irysy.drzewo)
###############################################
#           Model Drzewa Decyzyjnego          #
###############################################
library("party")
#skorzystam z dobrze znanego data setu do nauki
#a mianowicie z danych odnośnie irysów
#jest to data frame ze 150 przypadkami i 5zmiennymi
#zaczytanie danych
irysy = as.data.frame(iris)
#podstawowe informacje o danych
str(iris)
#Sepal length and width = długość i szerokość kielicha
#Petal length and width = długość i szerokość płatków
#Species = gatunek
#Zamieniam nazwy kolumn na polskie
library(plyr)
irysy = rename(irysy, c("Sepal.Length"="Kielich.Długość", "Sepal.Width"="Kielich.Szerokość",
"Petal.Length"="Płatek.Długość", "Petal.Width"="Płatek.Szerokość",
"Species"="Gatunek"))
temp = sample(2, nrow(irysy), replace=TRUE, prob=c(0.7,0.3))
trainData = irysy[temp==1]
testData = irysy[temp==2]
#Zamieniam nazwy kolumn na polskie
library(plyr)
irysy = rename(irysy, c("Sepal.Length"="Kielich.Długość", "Sepal.Width"="Kielich.Szerokość",
"Petal.Length"="Płatek.Długość", "Petal.Width"="Płatek.Szerokość",
"Species"="Gatunek"))
temp = sample(2, nrow(irysy), replace=TRUE, prob=c(0.7,0.3))
trainData = irysy[temp==1,]
testData = irysy[temp==2,]
View(testData)
#Dzielę dane na treningowe i testowe w skali 70% i 30%
temp = sample(2, nrow(irysy), replace=TRUE, prob=c(0.7,0.3))
trainData = irysy[temp==1,]
testData = irysy[temp==2,]
#drzewo decyzyjne, przewidywanie gatunku sądząc po wymaiarach
irysy.drzewo1 = ctree(Gatunek ~ Kielich.Długość + Kielich.Szerokość +
Płatek.Długość + Płatek.Szerokość, data = trainData)
#Otrzymane drzewo decyzyjne
plot(irysy.drzewo1)
#Przewidywania
przewidywania1 = table(predict(irysy.drzewo1),trainData$Gatunek)
przewidywania1
#Otrzymane drzewo decyzyjne
print(irysy.drzewo1)
plot(irysy.drzewo1)
#Przewidywania
przewidywania1 = table(predict(irysy.drzewo1),trainData$Gatunek)
?ctree
set.seed(1234)
temp = sample(2, nrow(irysy), replace=TRUE, prob=c(0.7,0.3))
trainData = irysy[temp==1,]
testData = irysy[temp==2,]
#drzewo decyzyjne, przewidywanie gatunku sądząc po wymaiarach
irysy.drzewo1 = ctree(Gatunek ~ Kielich.Długość + Kielich.Szerokość +
Płatek.Długość + Płatek.Szerokość, data = trainData)
#Otrzymane drzewo decyzyjne
print(irysy.drzewo1)
plot(irysy.drzewo1)
#Przewidywania
przewidywania1 = table(predict(irysy.drzewo1),trainData$Gatunek)
treeresponse(irysy.drzewo1, newdata = iris[1:10,])
?treeresponse
treeresponse(irysy.drzewo1, newdata = irysy[1:10,])
plot(irysy.drzewo1, type="simple")
#Przewidywania na danych testowych
przewidywaniaTest = predict(irysy.drzewo1, newdata = testData)
przewidywania2 = table(przewidywaniaTest, testData$Gatunek)
przewidywania2
przewidywania1
przewidywaniaTrain = predict(irysy.drzewo1)
przewidywania1 = table(przewidywaniaTrain,trainData$Gatunek)
przewidywania1
